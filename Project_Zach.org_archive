#    -*- mode: org -*-


Archived entries from file /Users/zhenhuhua/Dropbox/Business/NSG Technology/Org_doc/orgfolder/Project_Zach.org


* Java Programming and Software Engineering Fundamentals Specialization
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-11-23 Wed 18:58
  :ARCHIVE_FILE: ~/Dropbox/Business/NSG Technology/Org_doc/orgfolder/Project_Coursera.org
  :ARCHIVE_CATEGORY: Project_Coursera
  :END:
** Various Documentation
*** Class(Duke Special Sources)
**** FileResource
FileResource fr new FileResource();
***** .lines()	returns an Iterable that provides access to the contents of this opened file one line at a time	
for (String line : fr.lines()) {
    // process each line in turn}
***** .words()	returns an Iterable that provides access to the contents of this opened file one word at a time	
for (String word : fr.words()) {
    // process each word in turn}
***** .asString()	returns the entire contents of this opened file as one String	
String contents = fr.asString();
***** .getCSVParser()	returns a CSVParser object for this opened file, assuming it contains comma separated values with a header row	
CSVParser parser = fr.getCSVParser();
***** .getCSVParser(false)	returns a CSVParser object for this opened file, assuming it contains comma separated values without a header row
CSVParser parser = fr.getCSVParser(false)
**** URLResource
URLResource ul = new URLResource("http:www//xxxxxx");
***** .lines()	returns an Iterable that provides access to the contents of this opened web page one line at a time	
for (String line : ur.lines()) {
    // process each line in turn}
***** .words()	returns an Iterable that provides access to the contents of this opened web page one word at a time	
for (String word : ur.words()) {
    // process each word in turn}
***** .asString()	returns the entire contents of this opened web page as one String	
String contents = ur.asString();
***** .getCSVParser()	returns a CSVParser object for this opened web page, assuming it contains comma separated values with a header row	
CSVParser parser = ur.getCSVParser();
***** .getCSVParser(false)	returns a CSVParser object for this opened web page, assuming it contains comma separated values without a header row	
CSVParser parser = ur.getCSVParser(false);
**** DirectoryResource
public void methodname(){
DirectoryResource fr = new DirectoryResource();
for (File f: fr.selectedFiles()){
process each line in turn;}
}}
**** Pixel
<<<<<<< HEAD
***** .getX()	returns the pixel's x-coordinate within <2016-11-09 
** pythWed>the imag
=======
***** .getX()	returns the pixel's x-coordinate within the imag
>>>>>>> 28417e2... backup_Nov.17
e	pix1.getX() is 100
***** .getY()	returns the pixel's y-coordinate within the image	pix1.getY() is 200
***** .getRed()	returns the value of the pixel's red component (always in the range 0-255)	pix1.getRed() is 0
***** .getGreen()	returns the value of the pixel's green component (always in the range 0-255)	pix1.getGreen() is 26
***** .getBlue()	returns the value of the pixel's blue component (always in the range 0-255)	pix1.getBlue() is 87
***** .getAlpha()	returns the value of the pixel's alpha, or transparency, component (always in the range 0-255)	pix1.getAlpha() is 255
***** .setRed(newR)	changes the value of the pixel's red component to newR (if newR is not in the range of 0-255 it is changed to be in that range)	pix1.setRed(255) changes the color to (255, 26, 87, 255) 
***** .setGreen(newG)	changes the value of the pixel's green component to newG (if newG is not in the range of 0-255 it is changed to be in that range)	pix1.setGreen(255) changes the color to (0, 255, 87, 255) 
***** .setBlue(newB)	changes the value of the pixel's blue component to newB (if newB is not in the range of 0-255 it is changed to be in that range)	pix1.setBlue(255) changes the color to (0, 26, 255, 255) 
**** StorageResource
public StorageResource methodname(){
StorageResource name = new StorageResource();
name.add();
return name}
***** Method
****** .add(item)	adds the given item to the end of the list of strings	
sr.add("first!");
sr.add("next ...");
****** .size()	returns the number of strings stored in this list	sr.size() is 2 (after the example above)
sr.size() is 0 (immediately after clear() is called)
****** .data()	returns an Iterable that provides access to each string in the list one at a time	
for (String item : sr.data()) {
    // process each string in turn
}
****** .contains(item)	returns true only if the given item is in the list	sr.contains("first!") is true
sr.contains("last") is false
****** .clear()	removes all strings from this list, making it empty	
sr.clear();
**** ImageResource
public ImageResource methodname(ImageResource inImage){
ImageResource outImage = new ImageResource(inImage.getWidth(),inImage.getHeight());
for (Pixel pixel: outImage.pixels()){
process each line in turn;}
return outImage;}
***** Method
.getWidth()	returns the image's width, or number of pixels in the X direction	logo.getWidth() is 100
.getHeight()	returns the image's height, or number of pixels in the Y direction	logo.getHeight() is 85
.getPixel(x,y)	returns the pixel in this image at the coordinate (x, y)	logo.getPixel(0, 0) is the pixel (255, 255, 255, 255) 
.setPixel(x,y,pixel)	copies the RGBA values from the given pixel into pixel at the (x,y) coordinates given	logo.setPixel(50, 42, pix2) changes the color to white 
.pixels()	returns an Iterable that provides access to each of the pixels in the image, starting in the upper-left corner and moving down to the lower-right corner	
     for (Pixel p : logo.pixels()) {
          // process each pixel in turn}
.draw()	draws the image in a separate window	logo.draw();
.save()	saves the changes made to this image using its current file name	logo.save();
.getFileName()	returns the current file name of this image, or the empty string, "", if it was created as an empty image	String name = logo.getFileName();
.setFileName(newName)	changes the current file name of this image to the given name, useful when saving your changed image without modifying the original image on your computer	logo.setFileName("changed.jpg");
*** Class(Apache Commons CSV Classes)
**** CSVRecord
This class provides methods for accessing individual data values in a line of data within a CSV formatted file. 
it will be provided for you when you iterate using a CSVParser. Data values are always returned as a String
***** .get(columnName)	returns a String, the data in this record corresponding to the column with the given columnName
it is an error if the columnName does not exist in the header row (or does not have the same case)	
rec.get("Name") is "Fred"
rec.get("Food") is "Pizza"
***** .get(columnIndex)	returns a String, the data in this record corresponding to the column at the given columnIndex
note, the index of the first data value is 0	
rec.get(0) is "Fred"
rec.get(3) is "13"
***** .size()	returns the number of values in this record	
rec.size() is 4
**** CSVParser
Most likely you will not call any methods directly on a CSVParser object, but use it as an Iterable within your loop
***** .getCurrentLineNumber()	returns the line number of the current record in the iteration
*** Class(Standard Java)
**** String
***** .equals(other)	returns true only if this string has the same characters and in the same order as the other string	
s.equals("Colorful") is true
s.equals("colorful") is false
***** .equalsIgnoreCase(other)	returns true only if this string has the same characters and in the same order as the other string, regardles of case	
s.equalsIgnoreCase("Colorluf") is false
s.equalsIgnoreCase("colorful") is true
***** .length()	returns number of characters in this string	 
s.length() is 8
"".length() is 0
***** .indexOf(str)	returns the index within this string of the first occurrence of the given string 
note, indices returned start at 0, the first character in the string, and go to s.length()-1, the last character
note, returns -1 if the given string is not in this string	s.indexOf("l") is 2
s.indexOf("ful") is 5
***** .indexOf(str, startIndex)	returns the index within this string of the first occurrence of the given string, starting at startIndex
note, indices returned start at 0, the first character in the string, and go to s.length()-1, the last character
note, returns -1 if the given string is not in this string	s.indexOf("l", 3) is 7
s.indexOf("o", 1) is 1
***** .substring(startIndex)	returns a string with the characters of this string, starting from startIndex and going to the end of this string
note, indices given start at 0, the first character in the string, and go to s.length()-1, the last character	s.substring(1) is "olorful"
s.substring(5) is "ful"
***** .substring(startIndex, endIndex)	returns a string with the characters of this string, starting from startIndex and going up to, but not including, the character at endIndex
note, indices given start at 0, the first character in the string, and go to s.length()-1, the last character	s.substring(1, 2) is "o"
s.substring(1, 4) is "olo"
***** .toLowerCase()	returns a string with the same characters as this string, but with all letters lowercased	s.toLowerCase() is "colorful"
***** .toUpperCase()	returns a string with the same characters as this string, but with all letters uppercased	s.toUpperCase() is "COLORFUL"
***** .startsWith(prefix)	returns true only if this string starts with given prefix	
s.startswith("Color") is true
s.startswith("cool") is false
***** .endsWith(suffix)	returns true only if this string ends with given suffix	
s.endswith("ful") is true
s.endswith("fool") is false
***** .charAt()    the same as Stringbuilder.charAt()
**** math
***** .max(num1, num2)	returns the larger of two given numbers	Math.max(a, b) is 25
***** .min(num1, num2)	returns the smaller of two given numbers	Math.min(a, b) is -9
***** .abs(num)	returns the absolute value of the given number	Math.abs(a) is 25  Math.abs(b) is 9
***** .sqrt(num)	returns the positive square root of the given number	Math.sqrt(a) is 5  Math.sqrt(Math.abs(b)) is 3
**** Character 
| Method Name      | Functionality                    |
|------------------+----------------------------------|
| isLowerCase(ch)  | returns boolean if ch is 'a','b' |
| isDigit(ch)      | returns boolean if ch is '1','2' |
| toLowerCase(ch)  | returns lowercase version of ch  |
| toUpperCase(ch)  | returns uppercase version of ch  |
| isAlphabetic(ch) | returns boolean if ch is 'a','C' |
**** File
This class is Java's standard way to access a file on your computer
***** .getCanonicalPath()	returns the unique name of this file, i.e., where it is on the computer
***** .getName()	returns the name of this file, not including where it is on the computer
***** .length()	returns the length of this file
**** ArrayList
ArrayList<String> list = new ArrayList<String>(); creates an empty collection
***** .add(object)	adds the given object to the end of the collection	list.add("yes");
list is now ["this", "is", "a", "list", "yes"]
***** .get(int index)	returns the object at the given index
remember that indexing starts at 0	list.get(0) is "this"
***** .set(int index, object)	changes the element at the given index to the given object
remember that indexing starts at 0	list.set(1, "was");
list is now ["this", "was", "a", "list"]
***** .contains(object)	returns whether or not the list has the given object in it	list.contains("this") is true
***** .indexOf(object)	returns the index of the given object or -1 if the object is not in the list	list.indexOf("this") is 0
***** .size()	returns the number of elements in the list	list.size() is 4
***** .clear()	removes all the elements of the list	list.clear();
list is now empty with a .size() of 0
***** .remove(int index)	removes the element at the given index
note that the indices of elements past index get shifted down	list.remove(1);
list is now ["this", "a", "list"]
***** .remove(object)	removes the given element from the list, if it is present	list.remove("is");
list is now ["this", "a", "list"]
***** Iterable	a list is Iterable, allowing access to each item one at a time	
for (String s : list) {
    // process each item in turn 
}
*** Standard Java Operators
**** Converting Between Types
***** Integer.parseInt(s)	turn the String s into an integer value
note, this can fail, e.g., Integer.parseInt("abc") throws an exception	Integer.parseInt("123") is the number 123
***** Double.parseDouble(s)	turn the String s into a real valued number
note, this can fail, e.g., Double.parseDouble("abc") throws an exception	Double.parseDouble("2.46") is the number 2.46
***** (int)x	turn x into an integer value by truncating the fractional part of the number	(int)123.6 is 123
***** (double)x	turn x into a real valued number, for example if you wanted to calculate the average of several integer values	(double)123 is 123.0
** Java Programming: Programming Foundations with javaScript, HTML and CSS
*** Designing a Web Page with HTML and CSS
**** Metadata Elements
***** HTML    
Contains all other elements
SPecified using HTML standard
***** head
information about the page: title, scripts, CSS
***** title
Specifies page title
Nested iside <head></head> tags
**** Sectioning Elements
***** body
Contains all items seen on page
***** h1
Section header
Also <h2>,<h3>....<h6>
***** div
Defines section of web page
Useful for CSS
**** Image and Multimedia tags
Image Tags:
<img src="http://xyzw--png" width = "75%" />
No end tag, src required, width optional
**** Linking Pages Together
<a href = "https://developer.mozilla.org/en-US/Learn/HTML">
a resource for learning
</a> HTML.
anchor tag 
href attribute 
clickable text!
** Java Programming: Solving Programs with Software
*** Week1_ITerables in Java                                       :ARCHIVE:
**** Hello! around the world
***** Using BlueJ to Program in Java
Source Code---Human-readable
Byte Code--- Machine-readable
compile--- transfer Source Code to Byte Code
***** Components of a Java Program
****** What is an Iterable
******* Processing data from many sources: text files, web pages, images, folders
Building programs by re-using familiar ideas in new contexts
******* Iterable: 
Java construct for accwssing elements of a collection
****** A Java Program Deconstructed
******* import libraries
******* public class
******** public method
******** variables
******** control
****** Java Iterable and Variables
******* Using FileResource from edu.duke library
******** Iterable is a standard java interface, can be used in a for each loop as shown
******* Create variable: name, type, value
******** fr, FileResource, specific file on computer
******** line, String, each of the lines, in turn, from fr
******* Modifying Iterables and Variables
****** Summary
******* Java programs ar created using classes
******** code is in a method: written and called
******** methods and classes interact together
******* Iterables help with programs and programs
******* Variables have names, types and values
***** Summary
****** Two Interables in edu.duke
library: FileResource, URLResource
****** Java Libraries
******* java.lang
******* edu.duke
******* more later
****** edu.duke.FileResource
******* Construct an object using new
******** From a File or a String that's name of a file
******* Access contents of file via FileResource
******** one line-at-a-time:lines()
******** one word-at-a-time: words()
******** entire file as a String: asString()
**** Batch Grayscale Images
***** Iterating Over Files: DirectoryResource
****** Subtask: select and iterate over files
******* Start simple:
pick files & print their names
****** New concept:
******* Directory Resource: operate on a directory
******** Technical name for "folder"
***** Optional Review Videos on the Seven Step Approach
[[https://www.coursera.org/learn/java-programming/supplement/ibfyU/optional-review-videos-on-the-seven-step-approach][Solving Problems: The Seven Step Approach & Finding Bugs in Code]]
***** Seven Step Approach
****** Domain Knowledge
******* Gray
******** Blue= Green = reD
*** Java schedual[100%]
**** DONE Week1[100%]                                            :ARCHIVE:
CLOSED: [2016-10-24 Mon 11:14]
***** DONE Welcome to Course
CLOSED: [2016-10-07 Fri 12:35]
***** DONE Iterables in Java
CLOSED: [2016-10-07 Fri 12:35]
***** DONE Quiz"Hello"
CLOSED: [2016-10-07 Fri 15:53]
***** DONE Batch Grayscale Images
CLOSED: [2016-10-07 Fri 12:36]
***** DONE Quiz_Grayscale
CLOSED: [2016-10-07 Fri 16:10]
***** DONE Assignment1 Batch Grayscale
CLOSED: [2016-10-07 Fri 18:23]
***** DONE Assignment2 image Inversion
CLOSED: [2016-10-07 Fri 18:23]
***** DONE Quiz: Iterables in Java
CLOSED: [2016-10-07 Fri 18:23]
**** DONE Week2[100%]                                            :ARCHIVE:
CLOSED: [2016-10-24 Mon 11:14]
***** DONE finding a Gene in DNA
CLOSED: [2016-10-07 Fri 12:30]
***** DONE Finding a Gene and Web Links Exercise Part1
CLOSED: [2016-10-07 Fri 12:31]
***** DONE Finding a Gene and Web Links Exercise Part2
CLOSED: [2016-10-07 Fri 21:13]
***** DONE Finding a Gene and Web Links Exercise Part3
CLOSED: [2016-10-07 Fri 21:13]
***** DONE Finding a Gene and Web Links Exercise Part4
CLOSED: [2016-10-07 Fri 21:13]
***** DONE Quiz1
CLOSED: [2016-10-07 Fri 20:07]
***** DONE Finding All Genes in DNA
CLOSED: [2016-10-07 Fri 22:30]
***** DONE Quiz2
CLOSED: [2016-10-12 Wed 18:16]
***** DONE Finding Many Genes Part1
CLOSED: [2016-10-08 Sat 16:17]
***** DONE Finding Many Genes Part2
CLOSED: [2016-10-11 Tue 14:05]
***** DONE Finding Many Genes Part3
CLOSED: [2016-10-11 Tue 14:05]
***** DONE Debugging Part1
CLOSED: [2016-10-12 Wed 18:16]
***** DONE Debugging Part2
CLOSED: [2016-10-12 Wed 18:16]
**** DONE Week3[100%]                                            :ARCHIVE:
CLOSED: [2016-10-24 Mon 11:14]
***** DONE Courses
CLOSED: [2016-10-08 Sat 22:04]
***** DONE Quiz1
CLOSED: [2016-10-12 Wed 18:16]
***** DONE assignment1_Part1
CLOSED: [2016-10-11 Tue 15:23]
***** DONE assignment1_Part2
CLOSED: [2016-10-11 Tue 15:23]
***** DONE assignment1_Part3
CLOSED: [2016-10-11 Tue 15:23]
***** DONE assignment1_Part4
CLOSED: [2016-10-12 Wed 18:16]
***** DONE assignment1_Part5
CLOSED: [2016-10-12 Wed 18:16]
***** DONE assignment2_Part1
CLOSED: [2016-10-12 Wed 18:16]
***** DONE assignment2_Part2
CLOSED: [2016-10-12 Wed 22:28]
***** DONE assignment2_Part3
CLOSED: [2016-10-12 Wed 22:28]
***** DONE assignment2_Part4
CLOSED: [2016-10-12 Wed 22:28]
***** DONE assignment2_Part5
CLOSED: [2016-10-12 Wed 22:28]
***** DONE assignment2_Part6
CLOSED: [2016-10-12 Wed 22:28]
***** DONE Quiz2
CLOSED: [2016-10-12 Wed 22:28]
**** Week4[100%]
***** DONE Course
CLOSED: [2016-10-08 Sat 22:36]
***** Programming assignment1
***** Quiz
** Java Programming: Arrays, Lists, and Structured Data
*** Course_Work
**** Week1 Keeping information Secret
***** implementing the Caesar Cipher
****** Character Building
| Method Name      | Functionality                    |
|------------------+----------------------------------|
| isLowerCase(ch)  | returns boolean if ch is 'a','b' |
| isDigit(ch)      | returns boolean if ch is '1','2' |
| toLowerCase(ch)  | returns lowercase version of ch  |
| toUpperCase(ch)  | returns uppercase version of ch  |
| isAlphabetic(ch) | returns boolean if ch is 'a','C' |
***** Breaking the Caesar Cipher
***** Object Oriented Caesar Cipher
****** Object Oriented Concepts
****** Encapsulation
****** Fields(Instance Variables)
****** Visibility(Public, Private)
****** Constructors
**** Week2 Stories from Templates
***** Telling a Random Story
***** Using and Improving Gladlibs
**** Week3 Web Server Logs: From logs to Visits
***** Reading Log Files
***** Finding Unique IP Addresses
***** Counting Website Visits
**** Week4 Vigenere Cipher
***** Breaking the Vigenere Cipher
*** Course3 schedual[0%]
**** Week1[100%]
***** DONE Assignment1
CLOSED: [2016-10-24 Mon 11:15]
***** DONE Assignment2
CLOSED: [2016-10-17 Mon 20:13]
***** DONE Assignment3
CLOSED: [2016-10-24 Mon 11:16]
***** Assignment4
***** Assignment5
***** Assignment6
***** Quiz1
***** Quiz2
***** Quiz3
**** Week2[100%]
***** DONE Assignment1
CLOSED: [2016-10-18 Tue 23:32]
***** DONE Assignment2
CLOSED: [2016-10-18 Tue 23:32]
***** DONE Assignment3
CLOSED: [2016-10-24 Mon 11:16]
***** DONE Assignment4
CLOSED: [2016-10-24 Mon 11:16]
***** Assignment5
***** Quiz1
***** Quiz2
**** Week3[0%]
***** Assignment1
***** Assignment2
***** Assignment3
***** [#B] Quiz1
***** Quiz2
***** Quiz3
**** Week4[0%]
***** Assignment1
***** Assignment2
***** Assignment3
***** Quiz1
***** Quiz2
** Java Programming: Principles of Software Design
*** Week1: Programming and Interfaces
**** Searching Earthquake Data
**** Filtering Data
*** Week2: Sorting Algorithms
**** Implementing Selection Sort
**** Sorting as Scale
*** Week3: N-Grams: Predictive Text
**** Generating Random Text
**** Word N-Grams
*** Week4: Tools and Libraries for Everyone
**** Using Java Beyond BlueJ
**** Mainstream Java

* Object Oriented Java Programming: Data Structures and Beyond Specialization
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-11-23 Wed 18:58
  :ARCHIVE_FILE: ~/Dropbox/Business/NSG Technology/Org_doc/orgfolder/Project_Coursera.org
  :ARCHIVE_CATEGORY: Project_Coursera
  :END:
** Data Structures and Perfromance
*** Week1: Introduction to the Course and Working with Strings
**** Working with Strings in Java
**** Check your understanding
*** Week2: Efficiency Analysis and Benchmarking
**** Measuring Performance: Big O
**** Measuring Performance: Benchmarking
**** Check your Understanding
*** Week3: Interfaces, Linked Lists vs. Arrays, and Correctness
**** Abstraction, Inteerfacers, and LInked Lists
**** Testing and Correctness
**** Check your understanding Part 1
**** Markov Processes and Probabilites
**** Check your understanding Part 2
*** Trees!(including Binary Search Trees and Tries)
**** Trees
**** Run Time Analysis of BSTs
**** Tries
**** Check your Understanding
*** Hash Maps and Edit Distance
**** Hash Maps(or Tables)
**** Edit Distance
**** Check Your Understanding

* Zach Summary(Python & Java)
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-11-23 Wed 18:58
  :ARCHIVE_FILE: ~/Dropbox/Business/NSG Technology/Org_doc/orgfolder/Project_Coursera.org
  :ARCHIVE_CATEGORY: Project_Coursera
  :END:
** name method
*** class  CaesarCipher
*** public String encryptCaesarCipher
** Java Summary
| Duke Class        | function         | detail                                                |
|-------------------+------------------+-------------------------------------------------------|
| FileResource      | .lines()         | Return as Iterable line by line                       |
| URLResource       | .words()         | Return as Iterable word by word                       |
|                   | .asString        | Return as entire content as One String                |
|                   | .getCSVParser    | Return as CSVParser object for this file              |
|-------------------+------------------+-------------------------------------------------------|
| DirectoryResource | .selectedFiles() | Return as File file by file                           |
|-------------------+------------------+-------------------------------------------------------|
| StorageResource   | .add(item)       | adds the given item to the end of the list of strings |
|                   | .size()          | return as Int of Strings stored                       |
|                   | .data()          | Return as Iterable String by String in SR             |
|                   | .contains(item)  | Return as boolean                                     |
|                   | .clear()         | removes all strings, then .size() is 0                |
|-------------------+------------------+-------------------------------------------------------|
| Pixel             | referable        | referable                                             |
|-------------------+------------------+-------------------------------------------------------|
| ImageResource     | referable        | referable                                             |

| Standard Java | function                        | detail                                                                |
|---------------+---------------------------------+-----------------------------------------------------------------------|
| String        | .equals(other)                  | return true only if same characters and same order                    |
|               | .equalsIgnoreCase(other)        | return true only if same characters and same order,regardless of case |
|               | .length()                       | return characters number                                              |
|               | .indexOf(str)                   | return index of first occurrence of fiven str                         |
|               | .indexOf(str, startIndex)       | return index of first occurrence of fiven str, after startIndex       |
|               | .substring(startIndex)          | return a string, starting from startIndex to the end                  |
|               | .substring(startIndex,endIndex) | return a string, starting from startIndex to endIndex                 |
|               | .toLowerCase()                  | return String with lower case characters                              |
|               | .toUpperCase()                  | return String with upper case characters                              |
|               | .startsWith(prefix)             | return true only if string startsWith given prefix                    |
|               | .endsWith(prefix)               | return true only if string endsWith given prefix                      |
|               | .charAt()                       | refer to Stringbuilder.charAt()                                       |
|---------------+---------------------------------+-----------------------------------------------------------------------|
| math          | .max(num1,num2)                 | return the larger of given nums                                       |
|               | .min(num1,num2)                 | return the smaller of given nums                                      |
|               | .abs(num)                       | return the absolute value of given num                                |
|               | .sqrt(num)                      | retrun the positive square root of given num                          |
|---------------+---------------------------------+-----------------------------------------------------------------------|
| Characters    | isLowerCase(ch)                 | returns boolean if ch is 'a','b'                                      |
|               | isDigit(ch)                     | returns boolean if ch is '1','2'                                      |
|               | toLowerCase(ch)                 | returns lowercase version of ch                                       |
|               | toUpperCase(ch)                 | returns uppercase version of ch                                       |
|               | isAlphabetic(ch)                | returns boolean if ch is 'a','C'                                      |
|---------------+---------------------------------+-----------------------------------------------------------------------|
| File          | .getName()                      | returns the name of this file                                         |
|               | .length()                       | returns the length of this file                                       |
|---------------+---------------------------------+-----------------------------------------------------------------------|
| ArrayList     | .add(object)                    | add object to the Arraylist                                           |
|               | .get(index)                     | return the object at the given index                                  |
|               | .set(index, object)             | change the element at given index to the object                       |
|               | .contains(object)               | return boolean, if array has the given object                         |
|               | .indexOf(object)                | return the index of object, if not found, return "-1"                 |
|               | .size()                         | return elements size in this ArrayList                                |
|               | .clear()                        | remove all elements                                                   |
|               | .remove(index)                  | remove the element at given index                                     |
|               | .remove(object)                 | remove the object from the list                                       |
|               |                                 |                                                                       |

** Python Summary
|            | function                     | detail                                                     |
|------------+------------------------------+------------------------------------------------------------|
| String     | String[index]                | return character at index location of String               |
|            | String[index_a:index_b]      | return new String sliced from String(a to b)               |
|            | String_a + String_b          | return new String(String_a+String_b)                       |
|            | .lower()                     | return String with lower case character                    |
|            | .lstrip()                    | return String without left whitespace                      |
|            | .rstrip()                    | return String without right whitespace                     |
|            | .find('variable')            | return int that position of variable in String             |
|            | .find('variable',int_x)      | return int that position of variable in String after int_x |
|------------+------------------------------+------------------------------------------------------------|
| list       |                              | list(int, list, string)                                    |
|            | list[index_a:index_b]        | return list sliced from list(a to b)                       |
|            | list[index]                  | return list at location index                              |
|            | list_a + list_b              | return new list(list_a + list_b)                           |
|            | max(variable)                | return max in variable(list[int....])                      |
|            | min(variable)                | return min in variable(list[int....])                      |
|            | sum(variable)                | return sum in variable(list[int....])                      |
|            | .append(variable)            | add variable at the end of list                            |
|            | .sort() / sorted([list])     | sort first character from small to big                     |
|            | .sort(reverse=True)          | sort first character from big to small                     |
|            | .split('variable')           | split list by variable, whitespace is default              |
|------------+------------------------------+------------------------------------------------------------|
| for        | for letter in String:        | loop every word in String                                  |
|            | for i in range(len(String)): | loop every word in String(second way)                      |
|            | for line in file:            | loop every line in file                                    |
|            | for key in Dictionary:       | loop every key in Dictionary                               |
|            | for a,b in D.items():        | loop every key and value in Dictionary                     |
|------------+------------------------------+------------------------------------------------------------|
| Misc       | len(variable)                | return int about variable length (string, list)            |
|            | dir(variable)                |                                                            |
|            | type(variable)               | return variable type                                       |
|------------+------------------------------+------------------------------------------------------------|
| Dictionary | print Dictionary.keys()      | return as a list with keys(guess)                          |
|            | print Dictionary.value()     | return as a list with value(guess)                         |
|            | print Dictionary.items()     | return as a list with tuple inside, [('jan',100)...]       |
|------------+------------------------------+------------------------------------------------------------|
| Tuples     |                              | comparable, sortable                                       |

| package       |                                                                                 |   |
|---------------+---------------------------------------------------------------------------------+---|
| import urllib | html = urllib.urlopen(url).read()                                               |   |
|               | soup = BeautifulSoup(html)                                                      |   |
|---------------+---------------------------------------------------------------------------------+---|
| import socket | mysock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)                       |   |
|               | mysock.connect(('www.pythonlearn.com',80))                                      |   |
|               | mysock.send('GET http://www.pythonlearn.com/code/intro-short.txt HTTP/1.0\n\n') |   |
|               | mysock.close()                                                                  |   |
|---------------+---------------------------------------------------------------------------------+---|
| database      | conn = sqlite3.connect('emaildb.sqlite')                                        |   |
|               | cur = conn.cursor()                                                             |   |
|               | cur.execute('''DROP TABLE IF EXISTS Counts''')                                  |   |
|               | cur.execute('''CREATE TABLE Counts (org TEXT, count INTEGER)''')                |   |
|               | conn.commit()                                                                   |   |

** Python vs Java
|          | Python    | Java               |
|----------+-----------+--------------------|
| String   | .lstrip() | .startWith(prefix) |
|          | .rstrip() | .endWith(prefix)   |
|----------+-----------+--------------------|
| list(P)  |           |                    |
| array(J) |           |                    |

* Python For Everyone
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-11-23 Wed 18:58
  :ARCHIVE_FILE: ~/Dropbox/Business/NSG Technology/Org_doc/orgfolder/Project_Coursera.org
  :ARCHIVE_CATEGORY: Project_Coursera
  :END:
** Python for Everyone
** Python Data Structures
*** Chapter6: Strings
*** Chapter7: Files
**** hardware
Input and Output Devices
Secondary Memory
***** Software inside
Central Processing Unit
Main Memory
**** File Processing
***** Opening a File
****** open()
******* Handle = open(filename,mode)
mode could be r(default), or w(write)
filename is a string
******* example
fhand = open('mbox.txt')
print fhand
<open file 'mbox.txt', mode 'r' at 0x1005088b0>
****** The newline Character
******* example
stuff = 'Hello\nWorld'
print stuff
Hello 
World!
******* len
stuff = 'X\nY'
len(stuff) = 3
****** File Handle as a Sequence
******* A file handle open for read can be treated as a sequence of strings where each line in the file is a string in the sequence
******* We can use the for statement to iterate through a sequence
******* Remember- a sequence is an ordered set
****** Reading the "whole" File
******* example
fhand = open('mbox-short.txt')
inp = fhand.read()
print len(inp)
print inp[:20]
****** Searching Trough a file
fhand = open('mbox.txt')
for line in fhand:
    line = line.rstrip()
    if line.startswith('From:'):
        print line
****** Skipping with continue
if not line.startswith('From:'):
    continue
****** Using in to select lines
if not '@uct.ac.za' in line:
    continue
print line
****** try and except
try: 
    hand = open(fname)
except:
    print 'File cannot be opened:', fname
    exit()
*** Chapter8: Lists
**** Collection
 collection variaables can store multiple values in a single variable
**** List Constrants
A list element can be any Python object-even another list
a list can be empty
**** Lists are Mutable
String are immutable
Lists are mutable--we can change an element of a list using the index operator
**** How long is a list
len()
**** Using the range function
the range function returns a list of numbers that range from zero to one less than the parameter
We can construct an index loop using for and an integer iterator
**** A tale of two loops
friends = ['Joseph','Glenn','Sally']
for friend in friends:
    print'Happy New year:',friend

for i in range(len(friends)):
    friend = friends[i]
    print 'Happy New Year:',friend
**** Concatenating lists using +
a = [1,2,3]
b = [4,5,6]
c = a + b
print c
c = [1,2,3,4,5,6]
**** List Methods
type()
dir()    what can we do fir this parameter
append    stuff.append(x)
max(nums)
min(nums)
sum(nums)
**** Is something in a List?
some= [1,9,21,10,16]
9 in some
Ture
**** A list is an Ordered Sequence
friends.sort()
**** example
numlist = list()
while Ture:
   inp = raw_input('Enter a number:')
   if inp = 'done':break
   value = float(inp)
   numlist.append(value)
average = sum(numlist)/len(numlist)
*** Chapter9: Dictionaires
**** Comparing Lists and Dictionaries
Dictionaries are like Lists excpet that they use keys instead of numbers to look up value
**** When we see a new name
counts = dict()
names = ['csev','cwen','csav','zqian',cwen']
for name in names:
   if name not in counts:
      counts[name] = 1
   else:
      counts[name] = counts[name] + 1
print counts
**** The get method for dictionary
print counts.get(name,0)
0 is the Default value if key does not exist(and no Traceback).

equal to the following:
if name in counts:
   print counts[name]
else:
   print 0
**** Simplified counting with get()
for name in names:
    counts[name] = counts.get(name,0) + 1
print counts
**** Definite loops and Dicgtionaries
we can write a for loop that goes through all of the keys in the dictionary and looks up the values
***** example
counts = {'chuck':1, 'fred' :42, 'jan': 100}
for key in coutns
    print key, counts[keys]
**** Retrieving lists of keys and values
jjj = {'chuck':1,'fred':42,'jan':100}
print list(jjj),   ['jan','chuck','fred']
print jjj.keys()
print jjj.values()
print jjj.items()    return as a list with tuple inside, [('jan',100)...]
**** Bonus: Two Iteration Variables
for aaa,bbb in counts.items():
    print aaa,bbb
*** Chapter10: Tuples
**** Tuples are "immutable"
**** Tuples are more efficient
***** no need to build tuple structures
***** prefer tuples over lists on making "temporary variables"
***** Tuples and Assignment
****** Put a tuple on the left hand side of an assignment statement
****** even omit the parenthesis
***** Tuples and Dictionaries
d = dict()
d['csev'] = 2
d['cwen'] = 4
for (k,v) in d.items():
    print k,v

tups = d.items()
print tups
[('csev',2),('cwen',4)]
**** Tuples are Comparable
Comparision operators work with tuples, If the first item is equal, Python goes on to the next element
(0,1,2) < (5, 1 ,2)
true
('Johes', 'Sally') > ('Adams','Sam')
true
**** Sorting Lists of Tuples
d = {'a':10, 'b':1, 'c':22}
t = d.items()
print t
t.sort()
print t
**** Using sorted()
for k,v in sorted(d.items()):
    print k,v

tmp = list()
for k,v in d.items():
    tmp.append((v,k))
tmp.sort(reverse=True)
print tmp
**** the top 10 most common words
lst = list()
for key, val in counts.item():
    lst.append((val,key))
lst.sort(reverse=True)
for val,key in lst[:10]:
    print key, val
**** Even Shorter Version(adv)
print sorted([(v,k) for k,v in d.items()])
[[https://www.coursera.org/learn/python-data/supplement/iDHXm/lecture-slides][Lecture Slides]]
** Using Python to Access Web Data
[[https://www.coursera.org/learn/python-network-data/home/welcome][Coursera]]
*** Chapter 11-Regular Expressions
**** python settting practice experience                         :ARCHIVE:
***** import experience 
1. move module to C:\python 
2. run python, import module
3. works
4. run ipython, import module
5. fail

6. delete module in C:\python
7. run python, import module
8. fail

9. move module in C:Anaconda2
10. run ipyhon, import module
11. successful

12. move module and file.py in the same folder
13. using command line to open python
14. works
***** python notepad++ experience 
1. open command line
2. going to file dir
cd(change dir), dir(list dir), changing drive(C:/D:/E:) 
3. python+filename.py
***** using python to open file
1. move py.file and openfile in the same folder
2. using command line to open python
3. works 

***** ipython and python IDE
1. ipython IDE support linux command  VS   cpython IDE fail
2. using python/ipython file.py in ipython IDE, showing invalid syntax
3. command: # '''  """
**** symbol tables
|---------------+----------------------------------------------------|
| "^"           | matches the beginning of a line                    |
| "$"           | Matches the end of the line                        |
| .(dot,period) | Matches any character(wild card)                   |
| \s            | Mathces whitespace                                 |
| \S            | Matches any non-whitespace character               |
| "*"           | Repeats a character zero or more times             |
| *?            | Repeats a character zero or more times(non-greedy) |
| +             | Repeats a character one or more times              |
| +?            | Repeats a character one or more times(non-greedy)  |
| [aeiou]       | Matches a single character in the listed set       |
| [a-z0-9]      | The set of characters can include a range          |
| (             | Indicates where string extraction is to start      |
| )             | INdicates where string extraction is to end        |
|---------------+----------------------------------------------------|
**** The Regular Expression Modules
import the library using "import re"
use re.search() to see if a string matches a regular exprssion, similar to using find() for strings
use re.findall() extract portions of a string that match your regular expression similar to a combination of ind() and slicing: var[5:10]
**** Wild-Card Characters
The dot character matches any character
If you add the asterisk character, the character is "any number of times"
**** Matching and Extracting Data
The re.search() returns a True/False depending on whether the string matches the regular expression
If we actually want the matching strings to be extracted, we use re.findall()
**** Warning: Greedy Matching
The repeat (* and +) push outward in both directions(greedy) to match the largest possible string
**** Fine-Tuning String Extraction
'\S+@\S+'
^From (\S+@\S+)
Parentheses are not part of the match - but they tell where to start and stop what string to exact
**** The Double Split Pattern
Sometimes we split a line one way, and then grab one of the pieces of the line and split that piece again
***** ex. 
line = From stephen.marquard@uct.ac.za Sat Jan 5 .....
words = line.split()
email = words[1]
pieces = email.split('@')
print pieces[1]   ;;'uct.ac.za'

or line = From stephen.marquard@uct.ac.za Sat Jan 5 .....
y = re.findall('@([^ ]*)',line)   ;;'uct.ac.za'        insides[], ^ means not, [^ ]means non blank character
**** Spam Confidence
re.findall return as a string
**** Escape Character
want a special regular expression behave normally, prefix it with'\'
*** Chapter 12 Networks and Sockets
**** Networked Programs
Client: HTML JavaScrtipt, AJAX,CSS
INternet: HTTP, Request, Response, GET, socket, POST
SErver: PHP, MYSql, Templates
***** Common TCP Ports
Telnet(23) Login
SSH(22) Secure Login
HTTP(80)
HTTPS(443)
SMTP(25)(Mail)
8085 mean ports other than 80
***** Sockets in Python
import socket
mysock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
mysock.connect(('www.py4inf.com',80))
[[http://xkcd.com/353/][python 动漫]]
**** From Sockets to Applications
***** HTTP
HTTP is the set of rules to allow browers to retrieve web documents from servers over the Internet
http://www.dr-chuck.com/page1.htm
protocol    host         document
***** Getting Data From THe Server
Each Time the users click on an anchor tag with an href= value to switch to a new page, the browser makes a connection to the web
server and issue a "GET" request - to GET the content of the page at the specified URL

The server returns the HTML document to the browser,which formats and display the document to the user
**** Let's write a Browser
***** An HTTP Request in Python
***** Using urllib in Python
since HTTP is so common, we have a library that does all the socket work for us and makes web pages look like a file
[[http://www.net-intro.com/][Introduction to Networking]]
*** Chapter 12 Programs that Surf the Web 
**** Beautiful Soup
***** [[https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/][Beautiful Soup中文教材]]
**** XML&HTML
[[http://blog.163.com/txl129_2006@126/blog/static/1851087820103218453645/][HTML与XML的区别(转)]] 
[[http://www.w3schools.com/html/html_attributes.asp][HTML Attributes]]
***** XML
1. 信息交换的标准和简易方式，标记灵活多变
2. Extentsible Markup Language,没有(tag set),没有(grammatical rule),有(syntax rule),必须是(well-formed)
3. 符合一个模式(schema),就是有效的(schema valid),但不是强制的
4. XML是被设计用来描述数据的，重点是:什么是数据，如何存放数据。
***** HTML
1. 用于web,自定义是不行的
2. HTML命令可以说明文字、图形、动画、声音、表格、链接等。HTML的结构包括头部(Head)、主体(Body)两大部分，其中头部描述浏览器所需的信息，而主体则包含所要说明的具体内容。
3. HTML是被设计用来显示数据的，重点是:显示数据以及如何显示数据更好上面。
4. 在HTML中，括号内所定义的都是版面(Layout)等信息
5. 而XML则同时定义了数据的属性
**** homework
[[http://www.tutorialspoint.com/python/python_lists.htm][python list function]]
*** Chapter 13 Web Services and XML
**** Web Services Overview
1. With the HTTP Request/Response well understood and well supported, there was a natural move toward 
exchanging data between programs using these protocols
2. we needed to come up with an agreed way to represent data going between applications and across network
3. There are two commonlyused formats: XML and JSON
**** parsing XML in Python
***** string could be execute by find function, regular expression and xml.etree
**** eXtensible Markup Language-XML
***** XML Basic
****** Simple Element vs Complex Element
****** Start Tag,End Tag, Text Content, Attribute, Self Closing Tag
attributes-Keyword/value pairs on the opening tag of XML
****** XML as a tree
****** XML as Paths
***** XML Schema
xs:element
xs:sequence
xs:complexType
2002-05-30T09:30:10Z
***** Parsing XML in Python 
[[http://www.pythonlearn.com/code.zip][download sample Python code]] or [[http://www.pythonlearn.com/code][individual files]]  
tree = ET.fromstring(data)    ----  Parsing(the same with deserialize)
*** Chapter 13 JSON and the REST Architecture
**** JavaScript Object Notation(JSON)
***** compared to XML
disadvantage on infinitely set of thing(XML is better)
little self describing
does not attributes(XML has)
JSON(easy to work with)  VS   XML(harder but more expressive)
***** two basic struction:
array(like list)
object(like dictionary)  key:value
***** JSON in python
分解deserialize to dictionary(with { } bracket)
分解deserialize to list(with [ ] bracket)
java, hashmap and array
**** [[http://www.youtube.com/watch?v=mj-kCFzF0ME][Service Oriented Architectures]]
**** Accessing APIs in Python
API--Apilication Program Interface(define set of rules)
REST--Representational State Transfer(resource focused)
[[https://developers.google.com/maps/documentation/geocoding/][The Google Geocoding API]]
** Using Databases with Python
*** Chapter 14-Object Oriented Python
**** Object Oriented Python
***** Object Oriented
A program is made up of many cooperating objects
instead of being the"whole program" - each object is a little"island" within the program and cooperatively working with other objects.
A program is made up of one or more objects working together - objects make use of each other's capabilities
***** Object
An Object is a bit of self-contained Code and Data
A key aspect of the Object approach is to break the problem into smaller understandable parts(divide and conquer)
Objects have boundaries that allow to ignore unneeded detail
We have been using objects all alone: String Objects, Integer Objects,Dictionary Objects, List Objects...

objects hide detail---they allow us to ignore the detail of the"rest of the program"
Objects are bits of code and data
**** Terminology
***** Class-a template- Dog
***** Method or Message - A defined capability of a class-bark()
***** Field or attribute - A bit of data in a class- length
***** Object or Instance- A particular instance of a class - Lassie

***** example
x = list()
list is an class
x is an object
'append' is a method
**** Object Lifecycle
***** Constructor
set up some instance variables to have the proper initial values when the object is created
**** Inheritance
When we make a new class- we can resue an existing class and inherit all the capabilities of an existing class and then add our own little bit to make our new class
Another form of store and reuse
Write once-reuse many times
The new class(child) has all the capabilities of the old class(parent)-and then some more
*** Chapter 15-1 Basic Structured Query Language
**** Database Instroduction
python deal with unstruct data
SQL deal with struct data
**** Using Database
large project is used for website
*** Chapter 15-2 Data Models and Relational SQL
**** Designing a Data Model
***** Database design is an art form
***** Database design starts with a picture
picture of the data objects for our application and then figuring out how to represent the objects and their relationships
***** Basic Rule:
Don't put the same string data in twice-use a relationships instead
***** When there is one thing in the "real world" there should be one copy of that thing in the database
***** For each 'piece of info'
****** Is the column an object or an attribute of another object?
****** Once we define objects, we need to define the relationships between objects
**** Representing a Data Model in Tables
**** inserting Relational Data
**** Reconstructing data with JOIN
***** Relational Power
****** By removing the replicated data and 
******* replacing it with references to a single copy of each bit of data we build a "web" of information that the relational databsae can read through very quickly-even for every large amounts of data
******* often when you want some data it comes from a number of tables linked by these foreign keys
***** The JOIN Operation
****** The JOIN operation links across several tables as part of a select operation
****** you must tell the JOIN how to use the keys that make the connection between the tables using an ON clause
***** It can get complex....
select Track.title, Artist.name, Album.title, Genre.name from Track join Genre join Album join Artist on 
Track.genre_id= Genre.id and Track.album_id = Album.id and Album.artist_id = Artist.id
*** Chapter 15-3 Many-to-Many Relationships in SQL
*** Chapter 15-4 Databases and Visualization
**** Geocoding
***** Data Mining Technologies
https://hadoop.apache.org/
http://spark.apache.org/
https://aws.amazon.com/redshift/
http://community.pentaho.com/
***** this class is "personal data mining"
***** geodata
****** makes a google map from user entered data
****** uses the google geodata api
****** caches data in a database to avoid rate limiting and allow restarting
****** Visualized in a browser using the Google Maps API
**** page rank and web searching
***** web crawler
A web crawler is a computer program that browsers the World Wide Web in a methodical, automated manner. Web crawlers are mainly used to create a copy of all the visited pages for later processing by a search engine that will index the downloaded pages to provide fast searches.
***** Web Crawling Policy
****** a selection policy that states which pages to download
****** a revisit policy that states when to check for changes to the pages
****** a politeness policy that states how to avoid overloading Web sites
****** a parallelization policy that states how to coordinate distributed Web Crawlers
***** Search Indexing
Search engine indexing collects, parses, and stores data to facilitate fast and accurate information retrieval. The purpose of storing an index
is to optimize speed and performance in finding relevant documents for a search query. Without an index, the search engine would scan every document 
in the corpus, which would require considerable time and computing power.
**** Gmane-Mailing Lists
***** Mainling List-Gmane
****** Crawl the archive of a mailing list
****** Do some analysis/cleanup
****** Visualize the data as word cloud and lines
**** Geocoding API Demo
** Python Capstone
*** Capstone schedual
**** W2 Building a Search Engine[0%]
***** TODO Page Rank Introduction
***** TODO Page Rank Spidering
***** TODO Computing Page Rank
***** TODO Page Rank-Visualization
***** TODO Peer-Graded Assignments
**** W4 Spidering and Modeling Email Data[0%]
***** TODO Gmane Introduction
***** TODO Gmane Loading from the Web
***** TODO Gmane Data Cleanup/Modeling
***** TODO Gmane Looking at Modeled Data
***** TODO Peer-Graded Assignments
**** W6 Visualizing Email Data[0%]
***** TODO Gmane Basic Statistics and Word Cloud
***** TODO Gmane Visualizing Line
***** TODO Peer-Graded Assignments

* Interest
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-11-23 Wed 18:59
  :ARCHIVE_FILE: ~/Dropbox/Business/NSG Technology/Org_doc/orgfolder/Project_Coursera.org
  :ARCHIVE_CATEGORY: Project_Coursera
  :END:
** tech doc
[[http://xiaolai.li/][学习是一种生活方式]]-lixiaolai
[[http://www.ruanyifeng.com/docs/pg/][阮一峰的个人网站]]
[[http://www.jianshu.com/collection/2f6a49e22121][折腾之美-简书]]
** python
*** coursera for python                                           :ARCHIVE:
**** Python for Everyone
**** Python Data Structures
***** Chapter6: Strings
:LOGBOOK:
CLOCK: [2016-09-19 Mon 22:33]--[2016-09-19 Mon 22:33] =>  0:00
:END:
***** Chapter7: Files
:LOGBOOK:
CLOCK: [2016-09-21 Wed 18:02]--[2016-09-21 Wed 18:02] =>  0:00
:END:
****** hardware
Input and Output Devices
Secondary Memory
******* Software inside
Central Processing Unit
Main Memory
****** File Processing
******* Opening a File
******** open()
********* Handle = open(filename,mode)
mode could be r(default), or w(write)
filename is a string
********* example
fhand = open('mbox.txt')
print fhand
<open file 'mbox.txt', mode 'r' at 0x1005088b0>
******** The newline Character
********* example
stuff = 'Hello\nWorld'
print stuff
Hello 
World!
********* len
stuff = 'X\nY'
len(stuff) = 3
******** File Handle as a Sequence
********* A file handle open for read can be treated as a sequence of strings where each line in the file is a string in the sequence
********* We can use the for statement to iterate through a sequence
********* Remember- a sequence is an ordered set
******** Reading the "whole" File
********* example
fhand = open('mbox-short.txt')
inp = fhand.read()
print len(inp)
print inp[:20]
******** Searching Trough a file
fhand = open('mbox.txt')
for line in fhand:
    line = line.rstrip()
    if line.startswith('From:'):
        print line
******** Skipping with continue
if not line.startswith('From:'):
    continue
******** Using in to select lines
if not '@uct.ac.za' in line:
    continue
print line
******** try and except
try: 
    hand = open(fname)
except:
    print 'File cannot be opened:', fname
    exit()
***** Chapter8: Lists
:LOGBOOK:
CLOCK: [2016-09-21 Wed 23:45]--[2016-09-21 Wed 23:46] =>  0:01
:END:
****** Collection
 collection variaables can store multiple values in a single variable
****** List Constrants
A list element can be any Python object-even another list
a list can be empty
****** Lists are Mutable
String are immutable
Lists are mutable--we can change an element of a list using the index operator
****** How long is a list
len()
****** Using the range function
the range function returns a list of numbers that range from zero to one less than the parameter
We can construct an index loop using for and an integer iterator
****** A tale of two loops
friends = ['Joseph','Glenn','Sally']
for friend in friends:
    print'Happy New year:',friend

for i in range(len(friends)):
    friend = friends[i]
    print 'Happy New Year:',friend
****** Concatenating lists using +
a = [1,2,3]
b = [4,5,6]
c = a + b
print c
c = [1,2,3,4,5,6]
****** List Methods
type()
dir()    what can we do fir this parameter
append    stuff.append(x)
max(nums)
min(nums)
sum(nums)
****** Is something in a List?
some= [1,9,21,10,16]
9 in some
Ture
****** A list is an Ordered Sequence
friends.sort()
****** example
numlist = list()
while Ture:
   inp = raw_input('Enter a number:')
   if inp = 'done':break
   value = float(inp)
   numlist.append(value)

average = sum(numlist)/len(numlist)
***** Chapter9: Dictionaires
:LOGBOOK:
CLOCK: [2016-09-21 Wed 23:46]--[2016-09-21 Wed 23:46] =>  0:00
:END:
****** Comparing Lists and Dictionaries
Dictionaries are like Lists excpet that they use keys instead of numbers to look up value
****** When we see a new name
counts = dict()
names = ['csev','cwen','csav','zqian',cwen']
for name in names:
   if name not in counts:
      counts[name] = 1
   else:
      counts[name] = counts[name] + 1
print counts
****** The get method for dictionary
print counts.get(name,0)
0 is the Default value if key does not exist(and no Traceback).

equal to the following:
if name in counts:
   print counts[name]
else:
   print 0
****** Simplified counting with get()
for name in names:
    counts[name] = counts.get(name,0) + 1
print counts
****** Definite loops and Dicgtionaries
we can write a for loop that goes through all of the keys in the dictionary and looks up the values
******* example
counts = {'chuck':1, 'fred' :42, 'jan': 100}
for key in coutns
    print key, counts[keys]
****** Retrieving lists of keys and values
jjj = {'chuck':1,'fred':42,'jan':100}
print list(jjj),   ['jan','chuck','fred']
print jjj.keys()
print jjj.values()
print jjj.items()    return as a list with tuple inside, [('jan',100)...]
****** Bonus: Two Iteration Variables
for aaa,bbb in counts.items():
    print aaa,bbb
***** Chapter10: Tuples
:LOGBOOK:
CLOCK: [2016-09-25 Sun 10:42]--[2016-09-25 Sun 10:42] =>  0:00
:END:
****** Tuples are "immutable"
****** Tuples are more efficient
******* no need to build tuple structures
******* prefer tuples over lists on making "temporary variables"
******* Tuples and Assignment
******** Put a tuple on the left hand side of an assignment statement
******** even omit the parenthesis
******* Tuples and Dictionaries
d = dict()
d['csev'] = 2
d['cwen'] = 4
for (k,v) in d.items():
    print k,v

tups = d.items()
print tups
[('csev',2),('cwen',4)]
****** Tuples are Comparable
Comparision operators work with tuples, If the first item is equal, Python goes on to the next element
(0,1,2) < (5, 1 ,2)
true
('Johes', 'Sally') > ('Adams','Sam')
true
****** Sorting Lists of Tuples
d = {'a':10, 'b':1, 'c':22}
t = d.items()
print t
t.sort()
print t
****** Using sorted()
for k,v in sorted(d.items()):
    print k,v

tmp = list()
for k,v in d.items():
    tmp.append((v,k))
tmp.sort(reverse=True)
print tmp
****** the top 10 most common words
lst = list()
for key, val in counts.item():
    lst.append((val,key))
lst.sort(reverse=True)
for val,key in lst[:10]:
    print key, val
****** Even Shorter Version(adv)
print sorted([(v,k) for k,v in d.items()])
[[https://www.coursera.org/learn/python-data/supplement/iDHXm/lecture-slides][Lecture Slides]]
**** Using Python to Access Web Data
[[https://www.coursera.org/learn/python-network-data/home/welcome][Coursera]]
***** Chapter 11-Regular Expressions
****** python settting practice experience                     :ARCHIVE:
******* import experience 
1. move module to C:\python 
2. run python, import module
3. works
4. run ipython, import module
5. fail

6. delete module in C:\python
7. run python, import module
8. fail

9. move module in C:Anaconda2
10. run ipyhon, import module
11. successful

12. move module and file.py in the same folder
13. using command line to open python
14. works
******* python notepad++ experience 
1. open command line
2. going to file dir
cd(change dir), dir(list dir), changing drive(C:/D:/E:) 
3. python+filename.py
******* using python to open file
1. move py.file and openfile in the same folder
2. using command line to open python
3. works 

******* ipython and python IDE
1. ipython IDE support linux command  VS   cpython IDE fail
2. using python/ipython file.py in ipython IDE, showing invalid syntax
3. command: # '''  """
****** symbol tables
|---------------+----------------------------------------------------|
| "^"           | matches the beginning of a line                    |
| "$"           | Matches the end of the line                        |
| .(dot,period) | Matches any character(wild card)                   |
| \s            | Mathces whitespace                                 |
| \S            | Matches any non-whitespace character               |
| "*"           | Repeats a character zero or more times             |
| *?            | Repeats a character zero or more times(non-greedy) |
| +             | Repeats a character one or more times              |
| +?            | Repeats a character one or more times(non-greedy)  |
| [aeiou]       | Matches a single character in the listed set       |
| [a-z0-9]      | The set of characters can include a range          |
| (             | Indicates where string extraction is to start      |
| )             | INdicates where string extraction is to end        |
|---------------+----------------------------------------------------|
****** The Regular Expression Modules
import the library using "import re"
use re.search() to see if a string matches a regular exprssion, similar to using find() for strings
use re.findall() extract portions of a string that match your regular expression similar to a combination of ind() and slicing: var[5:10]
****** Wild-Card Characters
The dot character matches any character
If you add the asterisk character, the character is "any number of times"
****** Matching and Extracting Data
The re.search() returns a True/False depending on whether the string matches the regular expression
If we actually want the matching strings to be extracted, we use re.findall()
****** Warning: Greedy Matching
The repeat (* and +) push outward in both directions(greedy) to match the largest possible string
****** Fine-Tuning String Extraction
'\S+@\S+'
^From (\S+@\S+)
Parentheses are not part of the match - but they tell where to start and stop what string to exact
****** The Double Split Pattern
Sometimes we split a line one way, and then grab one of the pieces of the line and split that piece again
******* ex. 
line = From stephen.marquard@uct.ac.za Sat Jan 5 .....
words = line.split()
email = words[1]
pieces = email.split('@')
print pieces[1]   ;;'uct.ac.za'

or line = From stephen.marquard@uct.ac.za Sat Jan 5 .....
y = re.findall('@([^ ]*)',line)   ;;'uct.ac.za'        insides[], ^ means not, [^ ]means non blank character
****** Spam Confidence
re.findall return as a string
****** Escape Character
want a special regular expression behave normally, prefix it with'\'
***** Chapter 12 Networks and Sockets
****** Networked Programs
Client: HTML JavaScrtipt, AJAX,CSS
INternet: HTTP, Request, Response, GET, socket, POST
SErver: PHP, MYSql, Templates
******* Common TCP Ports
Telnet(23) Login
SSH(22) Secure Login
HTTP(80)
HTTPS(443)
SMTP(25)(Mail)
8085 mean ports other than 80
******* Sockets in Python
import socket
mysock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
mysock.connect(('www.py4inf.com',80))
[[http://xkcd.com/353/][python 动漫]]
****** From Sockets to Applications
******* HTTP
HTTP is the set of rules to allow browers to retrieve web documents from servers over the Internet
http://www.dr-chuck.com/page1.htm
protocol    host         document
******* Getting Data From THe Server
Each Time the users click on an anchor tag with an href= value to switch to a new page, the browser makes a connection to the web
server and issue a "GET" request - to GET the content of the page at the specified URL

The server returns the HTML document to the browser,which formats and display the document to the user
****** Let's write a Browser
******* An HTTP Request in Python
******* Using urllib in Python
since HTTP is so common, we have a library that does all the socket work for us and makes web pages look like a file
[[http://www.net-intro.com/][Introduction to Networking]]
***** Chapter 12 Programs that Surf the Web 
****** Beautiful Soup
******* [[https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/][Beautiful Soup中文教材]]
****** XML&HTML
[[http://blog.163.com/txl129_2006@126/blog/static/1851087820103218453645/][HTML与XML的区别(转)]] 
[[http://www.w3schools.com/html/html_attributes.asp][HTML Attributes]]
******* XML
1. 信息交换的标准和简易方式，标记灵活多变
2. Extentsible Markup Language,没有(tag set),没有(grammatical rule),有(syntax rule),必须是(well-formed)
3. 符合一个模式(schema),就是有效的(schema valid),但不是强制的
4. XML是被设计用来描述数据的，重点是:什么是数据，如何存放数据。
******* HTML
1. 用于web,自定义是不行的
2. HTML命令可以说明文字、图形、动画、声音、表格、链接等。HTML的结构包括头部(Head)、主体(Body)两大部分，其中头部描述浏览器所需的信息，而主体则包含所要说明的具体内容。
3. HTML是被设计用来显示数据的，重点是:显示数据以及如何显示数据更好上面。
4. 在HTML中，括号内所定义的都是版面(Layout)等信息
5. 而XML则同时定义了数据的属性
****** homework
[[http://www.tutorialspoint.com/python/python_lists.htm][python list function]]
***** Chapter 13 Web Services and XML
****** Web Services Overview
1. With the HTTP Request/Response well understood and well supported, there was a natural move toward 
exchanging data between programs using these protocols
2. we needed to come up with an agreed way to represent data going between applications and across network
3. There are two commonlyused formats: XML and JSON
****** parsing XML in Python
******* string could be execute by find function, regular expression and xml.etree
****** eXtensible Markup Language-XML
******* XML Basic
******** Simple Element vs Complex Element
******** Start Tag,End Tag, Text Content, Attribute, Self Closing Tag
attributes-Keyword/value pairs on the opening tag of XML
******** XML as a tree
******** XML as Paths
******* XML Schema
xs:element
xs:sequence
xs:complexType
2002-05-30T09:30:10Z
******* Parsing XML in Python 
[[http://www.pythonlearn.com/code.zip][download sample Python code]] or [[http://www.pythonlearn.com/code][individual files]]  
tree = ET.fromstring(data)    ----  Parsing(the same with deserialize)
***** Chapter 13 JSON and the REST Architecture
****** JavaScript Object Notation(JSON)
******* compared to XML
disadvantage on infinitely set of thing(XML is better)
little self describing
does not attributes(XML has)
JSON(easy to work with)  VS   XML(harder but more expressive)
******* two basic struction:
array(like list)
object(like dictionary)  key:value
******* JSON in python
分解deserialize to dictionary(with { } bracket)
分解deserialize to list(with [ ] bracket)
java, hashmap and array
****** [[http://www.youtube.com/watch?v=mj-kCFzF0ME][Service Oriented Architectures]]
****** Accessing APIs in Python
API--Apilication Program Interface(define set of rules)
REST--Representational State Transfer(resource focused)
[[https://developers.google.com/maps/documentation/geocoding/][The Google Geocoding API]]
**** Using Databases with Python
***** Chapter 14-Object Oriented Python
****** Object Oriented Python
******* Object Oriented
A program is made up of many cooperating objects
instead of being the"whole program" - each object is a little"island" within the program and cooperatively working with other objects.
A program is made up of one or more objects working together - objects make use of each other's capabilities
******* Object
An Object is a bit of self-contained Code and Data
A key aspect of the Object approach is to break the problem into smaller understandable parts(divide and conquer)
Objects have boundaries that allow to ignore unneeded detail
We have been using objects all alone: String Objects, Integer Objects,Dictionary Objects, List Objects...

objects hide detail---they allow us to ignore the detail of the"rest of the program"
Objects are bits of code and data
****** Terminology
******* Class-a template- Dog
******* Method or Message - A defined capability of a class-bark()
******* Field or attribute - A bit of data in a class- length
******* Object or Instance- A particular instance of a class - Lassie

******* example
x = list()
list is an class
x is an object
'append' is a method
****** Object Lifecycle
******* Constructor
set up some instance variables to have the proper initial values when the object is created
****** Inheritance
When we make a new class- we can resue an existing class and inherit all the capabilities of an existing class and then add our own little bit to make our new class
Another form of store and reuse
Write once-reuse many times
The new class(child) has all the capabilities of the old class(parent)-and then some more
***** Chapter 15-1 Basic Structured Query Language
****** Database Instroduction
python deal with unstruct data
SQL deal with struct data
****** Using Database
large project is used for website
***** Chapter 15-2 Data Models and Relational SQL
****** Designing a Data Model
******* Database design is an art form
******* Database design starts with a picture
picture of the data objects for our application and then figuring out how to represent the objects and their relationships
******* Basic Rule:
Don't put the same string data in twice-use a relationships instead
******* When there is one thing in the "real world" there should be one copy of that thing in the database
******* For each 'piece of info'
******** Is the column an object or an attribute of another object?
******** Once we define objects, we need to define the relationships between objects
****** Representing a Data Model in Tables
****** inserting Relational Data
****** Reconstructing data with JOIN
******* Relational Power
******** By removing the replicated data and 
********* replacing it with references to a single copy of each bit of data we build a "web" of information that the relational databsae can read through very quickly-even for every large amounts of data
********* often when you want some data it comes from a number of tables linked by these foreign keys
******* The JOIN Operation
******** The JOIN operation links across several tables as part of a select operation
******** you must tell the JOIN how to use the keys that make the connection between the tables using an ON clause
******* It can get complex....
select Track.title, Artist.name, Album.title, Genre.name from Track join Genre join Album join Artist on 
Track.genre_id= Genre.id and Track.album_id = Album.id and Album.artist_id = Artist.id
***** Chapter 15-3 Many-to-Many Relationships in SQL
***** Chapter 15-4 Databases and Visualization
****** Geocoding
******* Data Mining Technologies
https://hadoop.apache.org/
http://spark.apache.org/
https://aws.amazon.com/redshift/
http://community.pentaho.com/
******* this class is "personal data mining"
******* geodata
******** makes a google map from user entered data
******** uses the google geodata api
******** caches data in a database to avoid rate limiting and allow restarting
******** Visualized in a browser using the Google Maps API
****** page rank and web searching
******* web crawler
A web crawler is a computer program that browsers the World Wide Web in a methodical, automated manner. Web crawlers are mainly used to create a copy of all the visited pages for later processing by a search engine that will index the downloaded pages to provide fast searches.
******* Web Crawling Policy
******** a selection policy that states which pages to download
******** a revisit policy that states when to check for changes to the pages
******** a politeness policy that states how to avoid overloading Web sites
******** a parallelization policy that states how to coordinate distributed Web Crawlers
******* Search Indexing
Search engine indexing collects, parses, and stores data to facilitate fast and accurate information retrieval. The purpose of storing an index
is to optimize speed and performance in finding relevant documents for a search query. Without an index, the search engine would scan every document 
in the corpus, which would require considerable time and computing power.
****** Gmane-Mailing Lists
******* Mainling List-Gmane
******** Crawl the archive of a mailing list
******** Do some analysis/cleanup
******** Visualize the data as word cloud and lines
****** Geocoding API Demo
*** Python by Xah Lee
[[http://xahlee.info/perl-python/python_basics.html][Python: Learn in 1 hour]]
*** python教程
[[http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000][python廖雪峰]]
[[http://www.diveintopython.net/][Dive in Python]]
*** python网络爬虫
[[http://www.zhihu.com/question/20899988][如何入门python爬虫]],知乎
[[http://cuiqingcai.com/1052.html][python爬虫学习系列教程]]
[[http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html][python正则表达式基础]]
[[http://cuiqingcai.com/990.html][Python爬虫实战一之爬取糗事百科段子]]
[[http://www.codefrom.com/paper/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3urllib%E3%80%81urllib2%E5%8F%8Arequests][深入理解urllib、urllib2及requests]]
** Linux
*** Linux tips on FSJ
**** [[http://www.howtogeek.com/248780/how-to-compress-and-extract-files-using-the-tar-command-on-linux/][compress and extract on linux]]
**** [[http://www.computerhope.com/issues/ch000798.htm][remove dir in linux]]
**** [[http://www.cyberciti.biz/faq/copy-folder-linux-command-line/][copy folder in linux]]
**** [[http://www.computerhope.com/unix/utee.htm][tee command in linux]]
**** command > file.txt
[[http://askubuntu.com/questions/420981/how-do-i-save-terminal-output-to-a-file][ouput terminal into file]]
[[http://www.cyberciti.biz/faq/howto-save-ouput-of-linux-unix-command-to-file/][example of output terminal to file]]
**** rm/cp -r  ------   delete and copy will work on directory
**** -f ------   force to do, without any notice
*** Linux文件权限和访问模式
chmod 777
chown user filelist     "change owner"
chgrp group filelist    "change group"
SUID   (Set User ID)
SGID   (Set Group ID)
*** Linux环境变量
变量赋值时前面不能加 $ 符号，变量输出时必须要加 $ 前缀
Shell会有一个初始化的过程，用来设置环境变量。Shell会读取 /etc/profile 和 .profile 
**** .profile文件
设置默认终端类型和外观样式；
设置 Shell 命令查找路径，即PATH变量；
设置命令提示符。
**** 设置PATH变量
$PATH=/bin:/usr/bin    多个路径使用冒号(:)分隔
**** PS1和PS2变量
PS1变量用来保存命令提示符, 默认的第二命令提示符是 >，保存在 PS2 变量
*** Linux打印文件和发送邮件
**** 文件打印
***** pr命令
pr 命令用来将文本文件转换成适合打印的格式，它可以把较大的文件分割成多个页面进行打印，并为每个页面添加标题。
pr option(s) filename(s)
***** lp和lpr命令
lp 和 lpr 命令将文件传送到打印机进行打印。使用 pr 命令将文件格式化后就可以使用这两个命令来打印。
****** 打印多份文件
lp 的 -nNum 选项，或者 lpr 命令的 -Num 选项
****** 选择打印机
lp 命令的 -dprinter 选项，或者 lpr 命令的 -Pprinter 选项
***** cancel 和 lprm 命令
cancel 和 lprm 分别用来终止 lp 和 lpr 的打印请求。 需要指定ID（由 lp 或 lpq 返回）或打印机名称。
***** lpstat 和 lpq 命令
lpstat -o: 命令查看打印机中所有等待打印的文件
**** 发送邮件
***** 可以使用mail命令发送和接收邮件
$mail [-s subject] [-c cc-addr] [-b bcc-addr] to-addr
通过重定向操作符 < 来发送文件：
$mail -s "Report 05/06/07" admin@yahoo.com < demo.txt
*** Linux管道和过滤器
**** 管道和过滤器
可以把两个命令连起来使用，一个命令的输出作为另一个命令的输入，这就叫做管道
为了建立管道，需要在两个命令之间使用竖线(|)连接
连续使用竖线表示第一个命令的输出会作为第二个命令的输入，第二个命令的输出又会作为第三个命令的输入
**** Grep
$grep pattern file(s)
**** sort命令
它将文件中的各行按字母或数进行排序。
-n	按照数字大小排序，例如，10会排在2后面；-n 选项会忽略空格或 tab缩进。
-r	降序排序。sort 默认是升序排序。
-f	不区分大小写。
+x	对第x列（从0开始）进行排序。
**** pg和more命令
pg 和 more 命令分页显示，每次只显示一屏。
*** Linux进程管理
**** General info
Linux会为程序创建一个特殊的环境，该环境包含程序运行需要的所有资源,不受其他程序的干扰。这个特殊的环境就称为进程。
系统通过一个五位数字跟踪程序的运行状态，这个数字称为 pid 或进程ID。每个进程都拥有唯一的 pid。
**** 创建进程
***** 前台进程
默认情况下，用户创建的进程都是前台进程；前台进程从键盘读取数据，并把处理结果输出到显示器。
***** 后台进程
创建后台进程最简单的方式就是在命令的末尾加 &
***** 查看正在运行的进程
使用 ps 命令查看进程的运行状态
结合 -f 选项查看更多信息，f 是 full 的缩写
****** 每列的含义如下：
列	描述
UID	进程所属用户的ID，即哪个用户创建了该进程。
PID	进程ID。
PPID	父进程ID，创建该进程的进程称为父进程。
C	CPU使用率。
STIME	进程被创建的时间。
TTY	与进程有关的终端类型。
TIME	进程所使用的CPU时间。
CMD	创建该进程的命令。
***** 终止进程
当进程运行在前台时，可以通过 kill 命令或 Ctrl+C 组合键来结束进程。
如果进程运行在后台，那么首先要通过 ps 命令来获取进程ID，然后使用 kill 命令“杀死”进程
如果进程忽略 kill 命令，那么可以通过 kill -9 来结束：
*** Linux文件系统
Linux的文件结构是单个的树状结构，根目录是“/”，其他目录都要位于根目录下。
**** 每次安装系统的时候我们都会进行分区，Linux下磁盘分区和目录的关系如下：
任何一个分区都必须对应到某个目录上，才能进行读写操作，称为“挂载”。
被挂载的目录可以是根目录，也可以是其他二级、三级目录，任何目录都可以是挂载点。
目录是逻辑上的区分。分区是物理上的区分。
根目录是所有Linux的文件和目录所在的地方，需要挂载上一个磁盘分区。
**** 为什么要分区，如何分区？
可以把不同资料，分别放入不同分区中管理，降低风险。
大硬盘搜索范围大，效率低。
/home、/var、/usr/local 经常是单独分区，因为经常会操作，容易产生碎片。
**** 为了便于定位和查找，Linux中的每个目录一般都存放特定类型的文件，下表列出了各种Linux发行版本的常见目录：
***** 目录	说明
/	根目录，只能包含目录，不能包含具体文件。
/bin	存放可执行文件。很多命令就对应/bin目录下的某个程序，例如 ls、cp、mkdir。/bin目录对所有用户有效。
/dev	硬件驱动程序。例如声卡、磁盘驱动等，还有如 /dev/null、/dev/console、/dev/zero、/dev/full 等文件。
/etc	主要包含系统配置文件和用户、用户组配置文件。
/lib	主要包含共享库文件，类似于Windows下的DLL；有时也会包含内核相关文件。
/boot	系统启动文件，例如Linux内核、引导程序等。
/home	用户工作目录（主目录），每个用户都会分配一个目录。
/mnt	临时挂载文件系统。这个目录一般是用于存放挂载储存设备的挂载目录的，例如挂载CD-ROM的cdrom目录。
/tmp	临时文件目录，系统重启后不会被保存。
/usr	/user目下的文件比较混杂，包含了管理命令、共享文件、库文件等，可以被很多用户使用。
/var	主要包含一些可变长度的文件，会经常对数据进行读写，例如日志文件和打印队列里的文件。
/sbin	和 /bin 类似，主要包含可执行文件，不过一般是系统管理所需要的，不是所有用户都需要。
/proc	操作系统运行时，进程（正在运行中的程序）信息及内核信息（比如cpu、硬盘分区、内存信息等）存放在这里。/proc目录伪装的文件系统proc的挂载目录，proc并不是真正的文件系统。
**** 常用文件管理命令
***** 你可以通过下面的命令来管理文件：
Command	Description
cat filename	查看文件内容。
cd dirname	改变所在目录。
cp file1 file2	复制文件或目录。
file filename	查看文件类型(binary, text, etc)。
find filename dir	搜索文件或目录。
head filename	显示文件的开头，与tail命令相对。
less filename	查看文件的全部内容，可以分页显示，比more命令要强大。
ls dirname	遍历目录下的文件或目录。
mkdir dirname	创建目录。
more filename	查看文件的全部内容，可以分页显示。
mv file1 file2	移动文件或重命名。
pwd	显示用户当前所在目录。
rm filename	删除文件。
rmdir dirname	删除目录。
tail filename	显示文件的结尾，与head命令相对。
touch filename	文件不存在时创建一个空文件，存在时修改文件时间戳。
whereis filename	查看文件所在位置。
which filename	如果文件在环境变量PATH中有定义，那么显示文件位置。
df命令
***** 管理磁盘分区时经常会使用 df (disk free) 命令，df -k 命令可以用来查看磁盘空间的使用情况（以千字节计）
****** 每一列的含义如下：
列	说明
Filesystem	代表文件系统对应的设备文件的路径名（一般是硬盘上的分区）。
kbytes	分区包含的数据块（1024字节）的数目。
used	已用空间。
avail	可用空间。
capacity	已用空间的百分比。
Mounted on	文件系统挂载点。
du 命令
du (disk usage) 命令可以用来查看特定目录的空间使用情况。
挂载文件系统
挂载是指将一个硬件设备（例如硬盘、U盘、光盘等）对应到一个已存在的目录上。 若要访问设备中的文件，必须将文件挂载到一个已存在的目录上， 然后通过访问这个目录来访问存储设备。
注意：挂载目录可以不为空，但挂载后这个目录下以前的内容将不可用。
查看当前系统所挂载的硬件设备可以使用 mount 命令
挂载需要确认Linux是否支持所要挂载的文件系统格式。
用户和群组配额
用户和群组配额可以让管理员为每个用户或群组分配固定的磁盘空间。
下面的命令可以用来管理配额：
命令	说明
quota	显示磁盘使用情况以及每个用户组的配额。
edquota	编辑用户和群组的配额。
quotacheck	查看文件系统的磁盘使用情况，创建、检查并修复配额文件。
setquota	设置配额。
quotaon	开启用户或群组的配额功能。
quotaoff	关闭用户或群组的配额功能。
repquota	打印指定文件系统的配额。
** Org-Mode                                                        :ARCHIVE:
*** [[http://www.cnblogs.com/holbrook/archive/2012/04/12/2444992.html][org-mode: 最好的文档编辑利器，没有之一]]
**** 1.2.1 折叠大纲
***** S-TAB	循环切换整个文档的大纲状态（三种状态：折叠，打开下一级，打开全部）
***** TAB	循环切换光标所在大纲的状态
**** 1.2.2 在大纲之间移动
| C-c C-n   | 下/上一标题                 |
| C-c C-f/b | 下/上一标题（仅限同级标题） |
| C-c C-u   | 跳到上一级标题              |
| C-c C-j   | 切换到大纲浏览状态          |	 
**** 1.2.3 基于大纲的编辑
| M-RET          | 插入一个同级标题      |
| M-S-RET        | 插入一个同级TODO 标题 |
| M-LEFT/RIGHT   | 将当前标题升/降级     |
| M-S-LEFT/RIGHT | 将子树升/降级         |
| M-S-UP/DOWN    | 将子树上/下移         |
| C-c *          | 将本行设为标题/正文   |	 
**** 1.3 大纲的显示方式
***** 默认的大纲显示没有缩进，显得有些乱。可以用 M-x org-indent-mode切换到另一种显示方式：
如果想让某个文件默认用这种方式打开，可以在文件头部增加：
#+STARTUP: indent
如果希望打开所有org文件都默认用这种方式，可以在.emacs中配置：
(setq org-startup-indented t)
*** [[http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html][David O'Toole Org tutorial]]
**** C-c C-t   runs the command org-todo
**** Links to other places
***** [[link][description]]
** Lotus                                                           :ARCHIVE:
*** [[https://www.youtube.com/watch?v=p0bdOt1kUiM][copy document as a table]]
** Shell
[[http://c.biancheng.net/cpp/view/6996.html][Shell教程]]
- [[http://c.biancheng.net/cpp/view/6997.html][什么时候使用shell]]
- [[http://c.biancheng.net/cpp/view/6998.html][第一个shell脚本]]
- [[http://c.biancheng.net/cpp/view/6999.html][Shell变量：Shell变量的定义、删除变量、只读变量、变量类型]]
- [[http://c.biancheng.net/cpp/view/2739.html][Shell特殊变量：Shell $0, $#, $*, $@, $?, $$和命令行参数]]
- [[http://c.biancheng.net/cpp/view/2737.html][Shell替换：Shell变量替换，命令替换，转义字符]]
- [[http://c.biancheng.net/cpp/view/2736.html][Shell运算符：Shell算数运算符、关系运算符、布尔运算符、字符串运算符等]]
- [[http://c.biancheng.net/cpp/view/7000.html][Shell注释]]
- [[http://c.biancheng.net/cpp/view/7001.html][Shell字符串]]
- [[http://c.biancheng.net/cpp/view/7002.html][Shell数组：shell数组的定义、数组长度]]
- [[http://c.biancheng.net/cpp/view/7003.html][Shell echo命令]]
- [[http://c.biancheng.net/cpp/view/1499.html][shell printf命令：格式化输出语句]]
- [[http://c.biancheng.net/cpp/view/7005.html][Shell if else语句]]
- [[http://c.biancheng.net/cpp/view/7006.html][Shell case esac语句]]
- [[http://c.biancheng.net/cpp/view/7007.html][Shell for循环]]
- [[http://c.biancheng.net/cpp/view/7008.html][Shell while循环]]
- [[http://c.biancheng.net/cpp/view/7009.html][Shell until循环]]
- [[http://c.biancheng.net/cpp/view/7010.html][Shell break和continue命令]]
- [[http://c.biancheng.net/cpp/view/7011.html][Shell函数：Shell函数返回值、删除函数、在终端调用函数]]
- [[http://c.biancheng.net/cpp/view/2491.html][Shell函数参数]]
- [[http://c.biancheng.net/cpp/view/2738.html][Shell输入输出重定向：Shell Here Document，/dev/null文件]]
- [[http://c.biancheng.net/cpp/view/2740.html][Shell文件包含]]
** Autohotkey                                                      :ARCHIVE:
*** [[https://segmentfault.com/a/1190000004611125][Win下最爱效率利器:AutoHotKey]]
*** [[https://autohotkey.com/boards/viewtopic.php?t=1099][AutoHotkey 学习指南]]
*** [[https://zhuanlan.zhihu.com/autohotkey][AutoHotkey 之美]]
*** [[http://ahkcn.github.io/docs/scripts/][AutoHotkey 脚本展示]]
*** [[http://apple.stackexchange.com/questions/153930/autohotkey-equivalent-for-os-x][autohotkey equivalent for OS X]] 
** Total Commander
*** [[https://xbeta.info/studytc/index.htm][study lots of excellent plugin]]
*** [[http://www.guyiren.com/archives/1647][详解total commander提高工作效率的5个特有功能]]
*** [[http://www.zhihu.com/question/23473928][Total Commander"性价比"较高的功能和插件有哪些？]]
*** good plugins                                                  :ARCHIVE:
F4Menu: 选择何种程序打开
gsWlx: 快速浏览PDF文件（必须安装GhostScript 7.04或更高版本）
SynPlus
TreeCopy
exif：可以读取出图片的属性，应用于相片的批量重命名中
totalrsz：图片缩放插件
Candy: 多样的文件打开方式啊，大大减少了Windows单一文件关联带来的麻烦
** Double-entry bookkeeping                                        :ARCHIVE:
[[https://www.zhihu.com/question/20718557][复式记账（复式簿记）的基本原理是什么？]]
[[http://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html][Accounting for Computer Scientists]]
[[http://money.stackexchange.com/questions/2746/comprehensive-tutorial-on-double-entry-personal-finance][Comprehensive tutorial on double-entry personal finance]]
**** GNUcash+HomeBanks software
***** HomeBank                                                  :ARCHIVE:
[[https://www.zhihu.com/question/20117854][HomeBank]]--online software suggestion
[[https://linuxtoy.org/archives/homebank.html][HomeBank：家庭理财软件]]
***** GNUcash
[[http://www.360doc.com/content/09/1103/15/61497_8330614.shtml][Gnucash入门使用教学]]
[[https://www.youtube.com/watch?v=aqAaScYVeRQ][GnuCash Absolute Basics]]
[[http://people.ubuntu.com/~happyaron/udc-cn/lucid-html/ch04s07.html][GnuCash 财务软件]]
[[https://www.gnucash.org/docs/v2.6/C/gnucash-guide/basics-backup1.html][Backing Up and Recovering Data]]
[[http://superuser.com/questions/201628/gnucash-delete-backup-and-log-files][delete-backup-and-log-files]]
[[https://www.gnucash.org/docs/v2.6/C/gnucash-help/acct-types.html][Types of GnuCash Accounts, GNUcash ORG]]
** Google.search                                                   :ARCHIVE:
*** Study Google search skills
[[http://www.zhihu.com/question/20161362][如何用好 Google 等搜索引擎？]]
[[http://www.williamlong.info/archives/728.html][十大高明的Google搜索技巧]]
[[http://orgmode.org/manual/Handling-links.html][Handling Link]]
*** google search setting
1. "space" equal to "+"
2. exact search using "", or “”
3. screen using "-"
4. asterisk wildcard is * 
5. searching inside website, using Tab behind site
6. search similiar word, before word tying ~
7. list similiar webpage       related:url
8. inurl
9. intitle
   1. try Google Directory
** email English
*** 常用的基本句型                                                :ARCHIVE:
**** 称呼
Dear Mr/Ms/Mrs?Professor
Dear Mary
**** 续前文 
Thank you for your email of ...
Further to your last email,
**** 陈述理由
I am writing in connection with ...
I am writing with regard to...
In reply to your email, here are ...
Your name was given to me by...
We would like to point out that...
**** 提供信息
I'm writing to let you know that...
We are able to confirm that...
I am delighted to tell yo that...
We regret to inform you that...
**** 添加附件
Please find attached my report.
I'm sending you...as a pdf file.
**** 询问信息
Could you give me some information about...
I would like to know...
I'm interested in receiving /finding out...
**** 提出要求
I'd be grateful if you could...
I wonder if you could...
Do you think I could have...?
Thank you in advance for your help in this matter.
**** 做出承诺
I'll investigate the matter.
I will contact you again shortly.
**** 提供帮助
Would you like me to...?
If you wish, I would be happy to...
Let me know whether you would like me to...
**** 结束语
Thank you for your help
Do not hesitate to contact us again if you require any further information
Please feel free to contact me if you ahve any question
**** 问候和署名
I'm looking forward to...(+ing)
Give me regards to...
Best Wishes
Regards
*** 实习工作申请                                                  :ARCHIVE:
**** 陈述理由
With reference to your advertisement on the...website, I am interested in applying for the post of...
**** 自我介绍
I am 26 years old and am currently studying for a degree in ...at... University.
For the last two months, I have been working as a .. at ...
**** 关于职位
I am interested in the this job because...
I feel that I would be well-suited for this job/have a lot of experience in...
**** 添加简历
I have attached my CV as a Word document. You will notice that I... as well as... You will also notice that...
**** 结束语
I would be grateful if you would consider my application.
You will see from my CV that two people can be contacted as references, one is.. and the other is from...
I am available for interview in.../by phone any weekday afternoon, and you can email me or telephone me on the number below.
**** 问候
I look forward to hearing from you soon. 
Yours faithfully
** organizing skills                                               :ARCHIVE:
*** photos mamagement
[[https://ramihaha.tw/blogger-photos/][整理照片的五大重要高效步驟，不再身陷爆炸資料中]]
[[http://www.techbang.com/posts/4609-hard-drive-to-help-the-tens-of-thousands-of-photos-to-wheat-from-the-chaff?page=2][幫硬碟裡的幾萬張照片「去蕪存菁」]]
** communication skills                                            :ARCHIVE:
*** Don't multitask---Be present, be in that moment
don't be half in it and half out of it
*** Don't pontificate
state out opinion without any opportunity for response or argument or pushback or growth,it is really boring
You need to enter every conversation assuming that you have something to learn.
True listening requires a setting aside of oneself.
He said that sensing this acceptance, the speaker will become less and less vulnerable and more and more likely to open up the inner recesses
Bill Nye: Everyone you will ever meet knows something that you don't
*** use open-end questions
start your questions with who, what, when, where, why or how. 
they might have to stop for a moment and think about it, and get a much interesting response.
*** grow with the flow
that means thoughts will come into your mind, and you need to let them go out of your mind.
*** if you don't know, say that you don't know
talk should not be cheap
*** don't equate your experience with theirs
all experiences are individual, they never be the same
*** Try not to repeat yourself.
it is condescending and boring, such as keeping rephrasing one point over and over
*** stay out of weeds
Thay care about is you, what you have in common, 
not year, people and others, so forget the detail.
*** Listen
*** Be Brief

